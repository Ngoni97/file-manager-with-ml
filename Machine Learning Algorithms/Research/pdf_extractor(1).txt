import os
import sys
import fitz  # PyMuPDF
from concurrent.futures import ThreadPoolExecutor, as_completed
import threading
from pathlib import Path
import time

class PDFTextExtractor:
    def __init__(self, max_workers=4):
        """
        Initialize PDF text extractor with multithreading support
        
        Args:
            max_workers (int): Maximum number of threads for OCR processing
        """
        self.max_workers = max_workers
        self.lock = threading.Lock()
        
        # Check if PyMuPDF supports OCR
        try:
            # Test if OCR is available in this PyMuPDF build
            test_doc = fitz.open()
            test_page = test_doc.new_page()
            test_doc.close()
            print("PyMuPDF OCR support detected")
        except Exception as e:
            print(f"Note: Some OCR features may not be available: {e}")
    
    def is_pdf_digital(self, pdf_path, sample_pages=3):
        """
        Test if PDF contains digital text or needs OCR
        
        Args:
            pdf_path (str): Path to PDF file
            sample_pages (int): Number of pages to sample for testing
            
        Returns:
            bool: True if PDF contains digital text, False if needs OCR
        """
        try:
            doc = fitz.open(pdf_path)
            total_pages = len(doc)
            
            # Sample first few pages or all pages if fewer than sample_pages
            pages_to_check = min(sample_pages, total_pages)
            
            text_found = False
            for page_num in range(pages_to_check):
                page = doc[page_num]
                text = page.get_text().strip()
                
                # If we find substantial text (more than just spaces/newlines)
                if text and len(text.replace('\n', '').replace(' ', '')) > 10:
                    text_found = True
                    break
            
            doc.close()
            return text_found
            
        except Exception as e:
            print(f"Error testing PDF {pdf_path}: {e}")
            return False
    
    def extract_digital_text(self, pdf_path):
        """
        Extract text from digital PDF
        
        Args:
            pdf_path (str): Path to PDF file
            
        Returns:
            str: Extracted text
        """
        try:
            doc = fitz.open(pdf_path)
            text = ""
            
            for page_num in range(len(doc)):
                page = doc[page_num]
                page_text = page.get_text()
                text += f"\n--- Page {page_num + 1} ---\n{page_text}\n"
            
            doc.close()
            return text
            
        except Exception as e:
            print(f"Error extracting digital text from {pdf_path}: {e}")
            return ""
    
    def ocr_page(self, page_data):
        """
        OCR a single page using PyMuPDF (thread worker function)
        
        Args:
            page_data (tuple): (page_number, page_object)
            
        Returns:
            tuple: (page_number, extracted_text)
        """
        page_num, page = page_data
        
        try:
            # Method 1: Try PyMuPDF's OCR functionality
            try:
                # Get text using OCR - this works with newer PyMuPDF versions
                text = page.get_text("text", flags=fitz.TEXTFLAGS_TEXT)
                
                # If no text found, try OCR on rendered image
                if not text.strip():
                    # Convert page to image and back to text
                    mat = fitz.Matrix(2.0, 2.0)  # 2x zoom for better quality
                    pix = page.get_pixmap(matrix=mat)
                    
                    # Create a new document from the image
                    img_doc = fitz.open("png", pix.tobytes("png"))
                    img_page = img_doc[0]
                    
                    # Try to get text from the image
                    text = img_page.get_text()
                    img_doc.close()
                    
            except Exception:
                # Fallback: Extract text from rendered image
                mat = fitz.Matrix(2.0, 2.0)  # 2x zoom for better OCR quality
                pix = page.get_pixmap(matrix=mat)
                
                # Create temporary document from image
                img_doc = fitz.open("png", pix.tobytes("png"))
                img_page = img_doc[0]
                text = img_page.get_text()
                img_doc.close()
            
            with self.lock:
                print(f"Completed OCR for page {page_num + 1}")
            
            return (page_num, text)
            
        except Exception as e:
            with self.lock:
                print(f"Error OCR-ing page {page_num + 1}: {e}")
            return (page_num, "")
    
    def extract_ocr_text(self, pdf_path):
        """
        Extract text from scanned PDF using PyMuPDF OCR with multithreading
        
        Args:
            pdf_path (str): Path to PDF file
            
        Returns:
            str: Extracted text
        """
        try:
            doc = fitz.open(pdf_path)
            total_pages = len(doc)
            
            print(f"Starting OCR for {total_pages} pages using {self.max_workers} threads...")
            
            # Prepare page data for threading
            page_data = [(i, doc[i]) for i in range(total_pages)]
            
            # Dictionary to store results
            results = {}
            
            # Process pages with multithreading
            with ThreadPoolExecutor(max_workers=self.max_workers) as executor:
                # Submit all pages for processing
                future_to_page = {executor.submit(self.ocr_page, data): data[0] 
                                for data in page_data}
                
                # Collect results as they complete
                for future in as_completed(future_to_page):
                    page_num, text = future.result()
                    results[page_num] = text
            
            doc.close()
            
            # Combine results in page order
            combined_text = ""
            for page_num in range(total_pages):
                page_text = results.get(page_num, "")
                combined_text += f"\n--- Page {page_num + 1} ---\n{page_text}\n"
            
            return combined_text
            
        except Exception as e:
            print(f"Error extracting OCR text from {pdf_path}: {e}")
            return ""
    
    def process_pdf(self, pdf_path, output_path=None):
        """
        Main function to process PDF and extract text
        
        Args:
            pdf_path (str): Path to input PDF
            output_path (str): Path to output text file (optional)
            
        Returns:
            str: Extracted text
        """
        if not os.path.exists(pdf_path):
            print(f"Error: PDF file not found: {pdf_path}")
            return ""
        
        # Generate output path if not provided
        if output_path is None:
            pdf_name = Path(pdf_path).stem
            output_path = f"{pdf_name}_extracted.txt"
        
        print(f"Processing PDF: {pdf_path}")
        start_time = time.time()
        
        # Test if PDF is digital or needs OCR
        is_digital = self.is_pdf_digital(pdf_path)
        
        if is_digital:
            print("PDF contains digital text. Extracting...")
            text = self.extract_digital_text(pdf_path)
        else:
            print("PDF appears to be scanned. Using OCR...")
            text = self.extract_ocr_text(pdf_path)
        
        # Write to output file
        try:
            with open(output_path, 'w', encoding='utf-8') as f:
                f.write(text)
            
            end_time = time.time()
            print(f"Text extraction completed in {end_time - start_time:.2f} seconds")
            print(f"Output saved to: {output_path}")
            
        except Exception as e:
            print(f"Error writing output file: {e}")
        
        return text

# Example usage
if __name__ == "__main__":
    # Initialize extractor with 4 worker threads
    extractor = PDFTextExtractor(max_workers=4)
    
    # Example usage - replace with your PDF path
    pdf_file = "example.pdf"
    output_file = "extracted_text.txt"
    
    # Process single PDF
    if os.path.exists(pdf_file):
        text = extractor.process_pdf(pdf_file, output_file)
        print(f"Extracted {len(text)} characters of text")
    else:
        print("Example PDF not found. Please provide a valid PDF path.")
        print("\nTo use this script:")
        print("1. Install PyMuPDF: pip install PyMuPDF")
        print("2. Run: python script.py")
        print("3. Or use in your code:")
        print("   extractor = PDFTextExtractor()")
        print("   text = extractor.process_pdf('your_file.pdf')")
    
    # Example: Process multiple PDFs
    pdf_files = [
        "document1.pdf",
        "document2.pdf",
        "document3.pdf"
    ]
    
    for pdf in pdf_files:
        if os.path.exists(pdf):
            print(f"\n{'='*50}")
            extractor.process_pdf(pdf)
